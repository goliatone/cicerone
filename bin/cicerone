#!/usr/bin/env node
require('yargonaut')
  .style('cyan')
  .helpStyle('green.bold')
  .style('yellow', 'required');

var Table = require('cli-table');
var Promise = require('bluebird');
// var got = require('got-promise');
// https://www.npmjs.com/package/ping
var DEFAULT_LIST_ARGS =  {argv:{a:false}};

var table = new Table({
    head: ['IP', 'host'/*, 'active'*/],
    colWidths: [25, 40/*, 15*/],
    style : {compact : true, 'padding-left' : 2},
    // chars: { 'top': '═' , 'top-mid': '╤' , 'top-left': '╔' , 'top-right': '╗'
    //      , 'bottom': '═' , 'bottom-mid': '╧' , 'bottom-left': '╚' , 'bottom-right': '╝'
    //      , 'left': '║' , 'left-mid': '╟' , 'mid': '─' , 'mid-mid': '┼'
    //      , 'right': '║' , 'right-mid': '╢' , 'middle': '│' }
});

var Cicerone = require('..');
var argv = require('yargs')
    .usage('Usage: $0 <command> [options]')
    .command('list', 'Count the lines in a file', listCommand)
    .option('a', {
        alias: 'all',
        describe: 'Including hosts not managed by "cicerone"',
        type:'boolean'
    })
    .example('$0 list --all', 'count the lines in the given file')
    .option('D', {
        alias: 'domainFirst',
        describe: 'List items with domain first',
        type: 'boolean'
    })
    .command('add', 'Add a new host entry', addCommand)
    .option('i', {
        alias: 'ip',
        describe: 'IP of host to add or remove'
    })
    .option('d', {
        alias:'domain',
        describe:'Domain of host to add or remove'
    })
    .command('remove', 'Add a new host entry', removeCommand)
    .command('json', 'Add hosts entries from JSON file', jsonCommand)
    .option('f', {
        alias:'file',
        describe: 'JSON file with a top level object with an hosts array attribute'
    })
    .command('find', 'Find a host either by ip or by domain', findCommand)
    .version( function() {
		return 'cicerone version: ' + require( '../package' ).version;
	})
    .help('h')
    .alias('h', 'help')
    .alias( 'help', '?' )
    .epilog('MIT License 2015')
    .argv;

function jsonCommand(opts){
    var filepath = opts.argv.f || opts.argv.file;
    var file = require('fs').readFileSync(filepath, 'utf-8');
    var data = JSON.parse(file);
    Promise.each(data.hosts, function(item){
        return Cicerone.addHost(item.ip, item.domain);
    }).then(listCommand.bind(null, DEFAULT_LIST_ARGS));
}

function addCommand(opts){
    var item = normalizeArgs(opts).argv;
    return Cicerone.addHost(item.ip, item.domain).then(listCommand.bind(null, DEFAULT_LIST_ARGS));
}

function removeCommand(opts){
    var item = normalizeArgs(opts).argv;
    //TODO: Assert that ip and domain are valid
    console.log(item.ip, item.domain);
    return Cicerone.removeHost(item.ip, item.domain).then(listCommand.bind(null, DEFAULT_LIST_ARGS));
}

function listCommand(opts){
    var all = opts.argv.a || opts.argv.all;
    var domainFirst = opts.argv.D || opts.argv.domainFirst;

    return Cicerone.hostsFileJSON(domainFirst, all).then(function(hosts){
        var domain, ip;
        // console.log(JSON.stringify(hosts, null, 4))
        hosts.map(function(item){
            domain = Object.keys(item)[0],
            ip = item[domain];
            table.push([ip, domain]);
        });
         console.log(table.toString());
        // Promise.each(hosts, function(item) {
        //     domain = Object.keys(item)[0],
        //         ip = item[domain];
        //         console.log('domain', domain)
        //     return got(domain).then(function(res){
        //         table.push([ip, domain, res.statusCode === 200 ? '√' : '†']);
        //     }).catch(function(err){
        //         table.push([ip, domain, '†']);
        //     });
        // }).then(function(results){
        //     console.log(table.toString());
        // });

        // console.log(hosts);
    });
}

function findCommand(opts){
    var item = normalizeArgs(opts).argv;
    return Cicerone.find(item).then(function(host){
        console.log(host.ip, '\t', host.domain);
        return host;
    });
}
function normalizeArgs(opts){
    var item = opts.argv || opts;
    item.domain = item.d || item.domain,
    item.ip = item.i || item.ip;
    return opts;
}
